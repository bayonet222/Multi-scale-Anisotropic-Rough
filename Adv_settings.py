#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Aug 22, 2018 03:35:50 PM

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Adv_settings_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    Adv_settings_support.set_Tk_var()
    top = Advanced_settings (root)
    Adv_settings_support.init(root, top)
    root.mainloop()

w = None
def create_Advanced_settings(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    Adv_settings_support.set_Tk_var()
    top = Advanced_settings (w)
    Adv_settings_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Advanced_settings():
    global w
    w.destroy()
    w = None


class Advanced_settings:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("290x389+755+317")
        top.title("Advanced settings")
        top.configure(highlightcolor="black")



        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.TCheckbutton1 = ttk.Checkbutton(top)
        self.TCheckbutton1.place(relx=0.07, rely=0.05, relwidth=0.64
                , relheight=0.0, height=16)
        self.TCheckbutton1.configure(variable=Adv_settings_support.display_contour)
        self.TCheckbutton1.configure(takefocus="")
        self.TCheckbutton1.configure(text='''Display contours of ACF.''')

        self.TCheckbutton2 = ttk.Checkbutton(top)
        self.TCheckbutton2.place(relx=0.07, rely=0.13, relwidth=0.83
                , relheight=0.0, height=16)
        self.TCheckbutton2.configure(variable=Adv_settings_support.plot_residual)
        self.TCheckbutton2.configure(takefocus="")
        self.TCheckbutton2.configure(text='''Plot residual on each iteration.''')

        self.TLabelframe1 = ttk.Labelframe(top)
        self.TLabelframe1.place(relx=0.03, rely=0.21, relheight=0.24
                , relwidth=0.93)
        self.TLabelframe1.configure(text='''Johnson distribution''')
        self.TLabelframe1.configure(width=270)

        self.TLabel1 = ttk.Label(self.TLabelframe1)
        self.TLabel1.place(relx=0.06, rely=0.27, height=23, width=40, y=-10, h=5)

        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(text='''Mean:''')

        self.Spinbox1 = Spinbox(self.TLabelframe1, from_=-100000.0, to=100000.0)
        self.Spinbox1.place(relx=0.35, rely=0.27, relheight=0.21, relwidth=0.59
                , y=-10, h=5)
        self.Spinbox1.configure(activebackground="#f9f9f9")
        self.Spinbox1.configure(background="white")
        self.Spinbox1.configure(from_="-100000.0")
        self.Spinbox1.configure(highlightbackground="black")
        self.Spinbox1.configure(selectbackground="#c4c4c4")
        self.Spinbox1.configure(textvariable=Adv_settings_support.johnson_mean)
        self.Spinbox1.configure(to="100000.0")

        self.TLabel2 = ttk.Label(self.TLabelframe1)
        self.TLabel2.place(relx=0.06, rely=0.73, height=13, width=58, y=-10, h=5)

        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief=FLAT)
        self.TLabel2.configure(text='''Variance:''')

        self.Spinbox2 = Spinbox(self.TLabelframe1, from_=0.0, to=1000.0)
        self.Spinbox2.place(relx=0.35, rely=0.71, relheight=0.21, relwidth=0.59
                , y=-10, h=5)
        self.Spinbox2.configure(activebackground="#f9f9f9")
        self.Spinbox2.configure(background="white")
        self.Spinbox2.configure(highlightbackground="black")
        self.Spinbox2.configure(selectbackground="#c4c4c4")
        self.Spinbox2.configure(textvariable=Adv_settings_support.johnson_var)
        self.Spinbox2.configure(to="1000.0")

        self.TLabelframe2 = ttk.Labelframe(top)
        self.TLabelframe2.place(relx=0.03, rely=0.49, relheight=0.37
                , relwidth=0.93)
        self.TLabelframe2.configure(text='''Krylov non-linear system solver''')
        self.TLabelframe2.configure(width=270)

        self.TLabel3 = ttk.Label(self.TLabelframe2)
        self.TLabel3.place(relx=0.04, rely=0.22, height=20, width=74, y=-10, h=5)

        self.TLabel3.configure(background="#d9d9d9")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(font="TkDefaultFont")
        self.TLabel3.configure(relief=FLAT)
        self.TLabel3.configure(text='''Tolerance:''')

        self.TEntry1 = ttk.Entry(self.TLabelframe2)
        self.TEntry1.place(relx=0.35, rely=0.22, relheight=0.14, relwidth=0.59
                , y=-10, h=5)
        self.TEntry1.configure(textvariable=Adv_settings_support.krylov_tol)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="xterm")

        self.TLabel4 = ttk.Label(self.TLabelframe2)
        self.TLabel4.place(relx=0.04, rely=0.44, height=20, width=144, y=-10
                , h=5)
        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(font="TkDefaultFont")
        self.TLabel4.configure(relief=FLAT)
        self.TLabel4.configure(text='''Maximum iterations:''')

        self.Spinbox3 = Spinbox(self.TLabelframe2, from_=1.0, to=10000000.0)
        self.Spinbox3.place(relx=0.56, rely=0.44, relheight=0.14, relwidth=0.38
                , y=-10, h=5)
        self.Spinbox3.configure(activebackground="#f9f9f9")
        self.Spinbox3.configure(background="white")
        self.Spinbox3.configure(from_="1.0")
        self.Spinbox3.configure(highlightbackground="black")
        self.Spinbox3.configure(selectbackground="#c4c4c4")
        self.Spinbox3.configure(textvariable=Adv_settings_support.krylov_max_iter)
        self.Spinbox3.configure(to="10000000.0")

        self.TLabel5 = ttk.Label(self.TLabelframe2)
        self.TLabel5.place(relx=0.04, rely=0.67, height=20, width=64, y=-10, h=5)

        self.TLabel5.configure(background="#d9d9d9")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(font="TkDefaultFont")
        self.TLabel5.configure(relief=FLAT)
        self.TLabel5.configure(text='''Method:''')

        self.TCombobox1 = ttk.Combobox(self.TLabelframe2)
        self.TCombobox1.place(relx=0.35, rely=0.67, relheight=0.14, relwidth=0.59
                , y=-10, h=5)
        self.krylov_method_list = ["lgmres","gmres", "bicgstab","cgs", "minres"]
        self.TCombobox1.configure(values=self.krylov_method_list)
        self.TCombobox1.configure(textvariable=Adv_settings_support.krylov_method)
        self.TCombobox1.configure(takefocus="")

        self.TButton1 = ttk.Button(top)
        self.TButton1.place(relx=0.34, rely=0.9, height=22, width=74)
        self.TButton1.configure(command=Adv_settings_support.destroy_window)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Close''')






if __name__ == '__main__':
    vp_start_gui()



