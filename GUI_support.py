#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Aug 09, 2018 03:09:08 PM


import sys
import mars
import numpy as np

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
def set_Tk_var():
    global N
    N = StringVar()
    N.set(128)
    global M
    M = StringVar()
    M.set(128)
    global dx
    dx = StringVar()
    dx.set(1)
    global dy
    dy = StringVar()
    dy.set(1)
    global attempts
    attempts = StringVar()
    attempts.set(1)
    global rmsheight
    rmsheight = StringVar()
    rmsheight.set(1)
    global skewness
    skewness = StringVar()
    skewness.set(0.5)
    global kurtosis
    kurtosis = StringVar()
    kurtosis.set(3.5)
    global acf_type
    acf_type = StringVar()
    global n
    n = StringVar()
    n.set(16)
    global m
    m = StringVar()
    m.set(16)
    global phi
    phi = StringVar()
    phi.set(0.0)

def generate_surface(box):
    global N, M, dx, dy, attempts, rmsheight, skewness, kurtosis, acf_type
    global n, m, phi
    
    ### TO DO: Change this once you add support for advanced settings
    cutoff = 1e-5
    
    ### ----- Test code here ----- ###
    box.configure(state=NORMAL)
    box.insert(END, "Generated " + N.get() + " by " + M.get() + " matrix.\n")
    box.configure(state=DISABLED)
    ### -------------------------- ###
    
    # Create an instance of the surface class
    for i in range(int(attempts.get())):
        s= mars.surface(
                int(n.get()), int(m.get()), int(N.get()), int(M.get()), \
                np.float64(cutoff), np.float64(dx.get()), \
                np.float64(dy.get()), np.float64(phi.get()))
                
        # Step 1: Specify ACF
        acf= s.acf()
    
        # Step 2: Assemble & solve nonlinear system of equations
        guess= s.f0()        
        alpha= s.krylov(method="lgmres")
        
        # Step 3: Generate a random number matrix
        rescaled_skew, rescaled_kurt = s.rescale(
                alpha, np.float64(skewness.get()), \
                np.float64(kurtosis.get()))
        
        if (np.isnan(rescaled_skew)) and (np.isnan(rescaled_kurt)):
            sys.exit("Error: The program can't generate the surface because of the input Skew and Kurtosis.")
        
        rand= s.johnson_eta(rescaled_skew, rescaled_kurt)
        
        # Step 4: Generate the heightmap
        hmap= s.heightmap(alpha,rand)
        
        # Step 5: Save the surface
        s.save("heightmap.dat")
        

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import GUI
    GUI.vp_start_gui()


